}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
print("Your vector/matrix is numeric")
}
Make_matrix1(matList)
Make_matrix1(matB)
Make_matrix1(matC)
Make_matrix1(matD)
Make_matrix1(matA)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your vector/matrix has non numeric elements"))
}
if(x_class == "matrix" & nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(x_class == "matrix" & nrow(x) == ncol(x)){
print("The entered matrix is numeric")
print("Creating cache-matrix 'CMat' one level up
this function's internal environment:")
print(parent.env(environment()))
CMat <<- x
return(ls(parent.env(environment())))
}
#print("Your vector/matrix is numeric")
}
Make_matrix1(matList)
Make_matrix1(matB)
Make_matrix1(matC)
Make_matrix1(matD)
Make_matrix1(matA)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your vector/matrix has non numeric elements"))
}
if(x_class == "matrix" & nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(x_class == "matrix" & nrow(x) == ncol(x)){
print("The entered matrix is numeric")
print(paste("Creating cache-matrix 'CMat' one level",
"up this function's internal environment:"))
print(parent.env(environment()))
CMat <<- x
return(ls(parent.env(environment())))
}
#print("Your vector/matrix is numeric")
}
Make_matrix1(matA)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your vector/matrix has non numeric elements"))
}
if(x_class == "matrix" & nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(x_class == "matrix" & nrow(x) == ncol(x)){
print("The entered matrix is numeric. Creating cache-matrix 'CMat'")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMat <<- x
return(ls(parent.env(environment())))
}
#print("Your vector/matrix is numeric")
}
Make_matrix1(matA)
CMat
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your objec has non numeric elements"))
}
if(x_class == "matrix" & nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(x_class == "matrix" & nrow(x) == ncol(x)){
print("The entered matrix is numeric. Creating cache-matrix 'CMat'")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMat <<- x
return(ls(parent.env(environment())))
}
mat_len <- round(sqrt(length(x)))
square_matrix <- matrix(x, nrow = mat_len, ncol = mat_len)
print(square_matrix)
#print("Your vector/matrix is numeric")
}
Make_matrix1(1:4)
class(1:4)
class(1:4)
Make_matrix1(1:4)
Make_matrix1(c(1:4)
Make_matrix1(c(1:4))
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x_class)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your objec has non numeric elements"))
}
if(x_class == "matrix" & nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(x_class == "matrix" & det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(x_class == "matrix" & nrow(x) == ncol(x)){
print("The entered matrix is numeric. Creating cache-matrix 'CMat'")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMat <<- x
return(ls(parent.env(environment())))
}
mat_len <- round(sqrt(length(x)))
square_matrix <- matrix(x, nrow = mat_len, ncol = mat_len)
print(square_matrix)
#print("Your vector/matrix is numeric")
}
Make_matrix1(1:4)
nrow(1:4)
ncol(1:4)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print(x_class)
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your objec has non numeric elements"))
}
if(x_class == "matrix"){
if(nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(nrow(x) == ncol(x)){
print("You entered numeric matrix. Cache-matrix 'CMAT' created")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMAT <<- x
return(ls(parent.env(environment())))
}
}
mat_len <- round(sqrt(length(x)))
square_matrix <- matrix(x, nrow = mat_len, ncol = mat_len)
print(square_matrix)
#print("Your vector/matrix is numeric")
}
Make_matrix1(1:4)
Make_matrix1(matList)
Make_matrix1(matB)
Make_matrix1(matC)
Make_matrix1(matD)
Make_matrix1(matA)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1(1:5)
CMAT
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print("You entered object:")
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your objec has non numeric elements"))
}
if(x_class == "matrix"){
if(nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(nrow(x) == ncol(x)){
print("You entered numeric matrix. Cache-matrix 'CMAT' created")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMAT <<- x
return(ls(parent.env(environment())))
}
}
mat_len <- round(sqrt(length(x)))
square_matrix <- matrix(x, nrow = mat_len, ncol = mat_len)
print("Your entered numeric vector produced the next matrix:")
print(square_matrix)
print("Cache-matrix 'CMAT' with above matrix was created and")
print("stored in this function's environment:")
print(parent.env(environment()))
return(ls(parent.env(environment())))
}
Make_matrix1(1:25)
Make_matrix1(1:22)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1 <- function(x){
x_class <- class(x)
print("You entered object:")
print(x)
if(x_class !="integer" & x_class != "numeric"
& x_class != "matrix"){
return(print("Your object is not a vector or a matrix"))
}
if(!is.numeric(x)){
return(print("Your objec has non numeric elements"))
}
if(x_class == "matrix"){
if(nrow(x) != ncol(x)){
return(print("Your matrix is not square"))
}
if(det(x)== 0 ){
return(print("Your matrix has no inverse"))
}
if(nrow(x) == ncol(x)){
print("You entered numeric matrix. Cache-matrix 'CMAT' created")
print("one level up this function's internal environment:")
print(parent.env(environment()))
CMAT <<- x
return(ls(parent.env(environment())))
}
}
mat_len <- round(sqrt(length(x)))
square_matrix <- matrix(x, nrow = mat_len, ncol = mat_len)
print("Your entered numeric vector produced the next matrix:")
print(square_matrix)
print("Cache-matrix 'CMAT' with above matrix was created and")
print("stored in the Make_Matrix() function's environment:")
print(parent.env(environment()))
return(ls(parent.env(environment())))
}
Make_matrix1(matB)
Make_matrix1(matC)
Make_matrix1(matD)
Make_matrix1(matE)
Make_matrix1(matL)
Make_matrix1(matList)
Make_matrix1(matA)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
ls()
rm(Make_matrix.R)
rm("Make_matrix.R")
ls()
getwd()
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse <- function(x){
print("For matrix 'CMAT:'")
print(x)
if (!exists("CMAT_inv")) {
CMAT_inv <<- solve(CMAT)
print("the inverse matrix CMAT_inv is computed:")
print(CMAT_inv)
print("and stored in the Find_Inverse() function's environment:")
}
else {
print("the inverse matrix CMAT_inv already exists")
print(CMAT_inv)
}
print(parent.env(environment()))
ls(parent.env(environment()))
}
Find_Inverse(CMAT)
Find_Inverse(CMAT)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
rm(CMAT_inv)
ls()
Find_Inverse <- function(x){
print("For matrix 'CMAT:'")
print(x)
if (!exists("CMAT_inv")) {
CMAT_inv <<- solve(CMAT)
print("the inverse matrix CMAT_inv is computed:")
print(CMAT_inv)
print("and stored in the Find_Inverse() function's environment:")
}
else {
print("the inverse matrix CMAT_inv: already exists")
print(CMAT_inv)
print("already exists in Find_Inverse() function's environment:")
}
print(parent.env(environment()))
ls(parent.env(environment()))
}
Find_Inverse(CMAT)
Find_Inverse(CMAT)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
rm(CMAT_inv)
Find_Inverse(CMAT)
Find_Inverse(CMAT)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
matI
ls()
rm(CM*)
rm(CMAT,CMAT_inv,CMat)
ls()
Make_matrix1(matA)
rm(CMAT)
Make_matrix1(1:4)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1(1:4)
CMAT
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Make_matrix1(matB)
Make_matrix1(matC)
Make_matrix1(matD)
Make_matrix1(matE)
Make_matrix1(matL)
Make_matrix1(matList)
Make_matrix1(matA)
CMAT
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
ls()
CMAT
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(CMAT)
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
rm(CMAT_inv)
ls()
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
ls()
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
ls(CMAT_inv)
rm(CMAT_inv)
la9
ls()
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
CMAT%*%CMAT_inv
CMAT
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
ls()
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
ls()
rm(CMAT_inv)
Find_Inverse(CMAT)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
Find_Inverse(matA)
Find_Inverse(c(1,2,3,4))
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(c(1,2,3,4))
paste("for matrix",matA)
x
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
ls()
CMAT_inv
rm(CMAT_inv)
ls()
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(c(1,2,3,4))
cmat
ls()
CMAT
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3))
matF<-matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
matF
solve(matF)
det(matF)
nrow(matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3))
CMAT == matF
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
matF<-matrix(c(1,1,3,4,8,6,7,8,9),nrow=3,ncol=3)
det(matF)
Find_Inverse(matF)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
nested_func(12)
nested_func <- function(x){
z <- x - 10
x_inv(y){
y^2
}
print(x_inv(z))
}
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
nested_func(12)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
Find_Inverse(matF)
identical(matF,matI)
matI
matF
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/MakeMatrix.R')
ls()
matD
matE
matF
matB
matC
matF
Find_Inverse(matrix(c(1,2,3,4),nrow=2,ncol=2))
Find_Inverse(matF
Find_Inverse(matF)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
ls()
rm(CMAT)
ls()
a
rm(a)
env
rm(env)
evaluate
makeCacheMatrix(matA)
makeCacheMatrix(matB)
makeCacheMatrix(matC)
makeCacheMatrix(matD)
makeCacheMatrix(matL)
makeCacheMatrix(matList)
makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
makeCacheMatrix(1:16)
makeCacheMatrix(1:14)
makeCacheMatrix(1:3)
makeCacheMatrix(1:2)
rm(CMAT)
ls()
cacheSolve(matA)
ls()
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
makeCacheMatrix(matA)
cacheSolve(matrix(c(1,2,3,4),nrow=2,ncol=2))
matF
cacheSolve(matf)
cacheSolve(matF)
cacheSolve(CMAT)
cacheSolve(CMAT)
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
getwd()
setwd("E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2")
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
ls
ls()
getwd()
source('E:/0-DataScienceCertification-COURSERA/Course2-RProgramming/Week3/cache/ProgrammingAssignment2/cachematrix.R')
